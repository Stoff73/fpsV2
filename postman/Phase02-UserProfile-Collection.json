{
	"info": {
		"_postman_id": "phase02-user-profile-collection",
		"name": "Phase 02 - User Profile API",
		"description": "Complete API testing collection for Phase 02 User Profile endpoints including UserProfileController, FamilyMembersController, and PersonalAccountsController.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{auth_token}}",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "base_url",
			"value": "http://127.0.0.1:8000",
			"type": "string"
		},
		{
			"key": "auth_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "family_member_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "line_item_id",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "User Profile Controller",
			"item": [
				{
					"name": "GET User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success field', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Response contains personal_info', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('personal_info');",
									"});",
									"",
									"pm.test('Response contains family_members', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('family_members');",
									"});",
									"",
									"pm.test('Response contains income_occupation', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('income_occupation');",
									"});",
									"",
									"pm.test('Total annual income is calculated', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.income_occupation).to.have.property('total_annual_income');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/user/profile",
							"host": ["{{base_url}}"],
							"path": ["api", "user", "profile"]
						}
					}
				},
				{
					"name": "PUT Update Personal Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success message', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"John Doe Updated\",\n    \"date_of_birth\": \"1990-01-01\",\n    \"gender\": \"male\",\n    \"marital_status\": \"married\",\n    \"national_insurance_number\": \"AB123456C\",\n    \"address_line_1\": \"123 Main Street\",\n    \"address_line_2\": \"Apt 4B\",\n    \"city\": \"London\",\n    \"county\": \"Greater London\",\n    \"postcode\": \"SW1A 1AA\",\n    \"phone\": \"07700900123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/user/profile/personal",
							"host": ["{{base_url}}"],
							"path": ["api", "user", "profile", "personal"]
						}
					}
				},
				{
					"name": "PUT Update Income & Occupation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Income values are updated', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"occupation\": \"Software Engineer\",\n    \"employer\": \"Tech Company Ltd\",\n    \"industry\": \"technology\",\n    \"employment_status\": \"employed\",\n    \"annual_employment_income\": 85000.00,\n    \"annual_self_employment_income\": 0.00,\n    \"annual_rental_income\": 15000.00,\n    \"annual_dividend_income\": 5000.00,\n    \"annual_other_income\": 0.00\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/user/profile/income-occupation",
							"host": ["{{base_url}}"],
							"path": ["api", "user", "profile", "income-occupation"]
						}
					}
				},
				{
					"name": "PUT Update Personal Info - Validation Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 422', function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test('Validation errors are returned', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('errors');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"invalid-email-format\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/user/profile/personal",
							"host": ["{{base_url}}"],
							"path": ["api", "user", "profile", "personal"]
						}
					}
				}
			]
		},
		{
			"name": "Family Members Controller",
			"item": [
				{
					"name": "GET All Family Members",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains family_members array', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('family_members');",
									"    pm.expect(jsonData.data.family_members).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/user/family-members",
							"host": ["{{base_url}}"],
							"path": ["api", "user", "family-members"]
						}
					}
				},
				{
					"name": "POST Create Family Member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Family member is created', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('family_member');",
									"    ",
									"    // Save family member ID for later tests",
									"    pm.collectionVariables.set('family_member_id', jsonData.data.family_member.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"relationship\": \"child\",\n    \"name\": \"Johnny Doe\",\n    \"date_of_birth\": \"2015-05-20\",\n    \"gender\": \"male\",\n    \"is_dependent\": true,\n    \"education_status\": \"primary\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/user/family-members",
							"host": ["{{base_url}}"],
							"path": ["api", "user", "family-members"]
						}
					}
				},
				{
					"name": "GET Single Family Member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Returns single family member', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('family_member');",
									"    pm.expect(jsonData.data.family_member).to.have.property('id');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/user/family-members/{{family_member_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "user", "family-members", "{{family_member_id}}"]
						}
					}
				},
				{
					"name": "PUT Update Family Member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Family member is updated', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.family_member.name).to.equal('Johnny Doe Updated');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Johnny Doe Updated\",\n    \"education_status\": \"secondary\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/user/family-members/{{family_member_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "user", "family-members", "{{family_member_id}}"]
						}
					}
				},
				{
					"name": "DELETE Family Member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Family member is deleted', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/user/family-members/{{family_member_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "user", "family-members", "{{family_member_id}}"]
						}
					}
				},
				{
					"name": "POST Create Family Member - Validation Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 422', function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test('Validation errors for required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('errors');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"relationship\": \"invalid_relationship\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/user/family-members",
							"host": ["{{base_url}}"],
							"path": ["api", "user", "family-members"]
						}
					}
				}
			]
		},
		{
			"name": "Personal Accounts Controller",
			"item": [
				{
					"name": "GET Personal Accounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains accounts', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('accounts');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/user/personal-accounts",
							"host": ["{{base_url}}"],
							"path": ["api", "user", "personal-accounts"]
						}
					}
				},
				{
					"name": "POST Calculate Personal Accounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains all three calculations', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('profit_and_loss');",
									"    pm.expect(jsonData.data).to.have.property('cashflow');",
									"    pm.expect(jsonData.data).to.have.property('balance_sheet');",
									"    pm.expect(jsonData.data).to.have.property('period');",
									"});",
									"",
									"pm.test('Profit and Loss has correct structure', function () {",
									"    var jsonData = pm.response.json();",
									"    var pl = jsonData.data.profit_and_loss;",
									"    pm.expect(pl).to.have.property('total_income');",
									"    pm.expect(pl).to.have.property('total_expenses');",
									"    pm.expect(pl).to.have.property('net_profit_loss');",
									"});",
									"",
									"pm.test('Balance Sheet has correct structure', function () {",
									"    var jsonData = pm.response.json();",
									"    var bs = jsonData.data.balance_sheet;",
									"    pm.expect(bs).to.have.property('total_assets');",
									"    pm.expect(bs).to.have.property('total_liabilities');",
									"    pm.expect(bs).to.have.property('total_equity');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"start_date\": \"2024-01-01\",\n    \"end_date\": \"2024-12-31\",\n    \"as_of_date\": \"2024-12-31\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/user/personal-accounts/calculate",
							"host": ["{{base_url}}"],
							"path": ["api", "user", "personal-accounts", "calculate"]
						}
					}
				},
				{
					"name": "POST Create Line Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Line item is created', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('line_item');",
									"    ",
									"    // Save line item ID for later tests",
									"    pm.collectionVariables.set('line_item_id', jsonData.data.line_item.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"account_type\": \"profit_and_loss\",\n    \"period_start\": \"2024-01-01\",\n    \"period_end\": \"2024-12-31\",\n    \"line_item\": \"Consulting Income\",\n    \"category\": \"income\",\n    \"amount\": 15000.00,\n    \"notes\": \"Side project consulting work\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/user/personal-accounts/line-item",
							"host": ["{{base_url}}"],
							"path": ["api", "user", "personal-accounts", "line-item"]
						}
					}
				},
				{
					"name": "PUT Update Line Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Line item is updated', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.line_item.amount).to.equal('20000.00');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 20000.00,\n    \"notes\": \"Updated consulting income\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/user/personal-accounts/line-item/{{line_item_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "user", "personal-accounts", "line-item", "{{line_item_id}}"]
						}
					}
				},
				{
					"name": "DELETE Line Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Line item is deleted', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/user/personal-accounts/line-item/{{line_item_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "user", "personal-accounts", "line-item", "{{line_item_id}}"]
						}
					}
				},
				{
					"name": "POST Create Line Item - Validation Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 422', function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test('Validation errors are returned', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('errors');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"account_type\": \"invalid_type\",\n    \"amount\": \"not-a-number\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/user/personal-accounts/line-item",
							"host": ["{{base_url}}"],
							"path": ["api", "user", "personal-accounts", "line-item"]
						}
					}
				}
			]
		},
		{
			"name": "Authentication Tests",
			"item": [
				{
					"name": "GET Profile - Unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/user/profile",
							"host": ["{{base_url}}"],
							"path": ["api", "user", "profile"]
						}
					}
				},
				{
					"name": "GET Family Members - Unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/user/family-members",
							"host": ["{{base_url}}"],
							"path": ["api", "user", "family-members"]
						}
					}
				}
			]
		}
	]
}
